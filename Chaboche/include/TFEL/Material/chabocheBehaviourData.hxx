/*!
* \file   TFEL/Material/chabocheBehaviourData.hxx
* \brief  this file implements the chabocheBehaviourData class.
*         File generated by tfel version 3.4.1
 */

#ifndef LIB_TFELMATERIAL_CHABOCHE_BEHAVIOUR_DATA_HXX
#define LIB_TFELMATERIAL_CHABOCHE_BEHAVIOUR_DATA_HXX

#include<limits>
#include<string>
#include<sstream>
#include<iostream>
#include<stdexcept>
#include<algorithm>

#include"TFEL/Raise.hxx"
#include"TFEL/PhysicalConstants.hxx"
#include"TFEL/Config/TFELConfig.hxx"
#include"TFEL/Config/TFELTypes.hxx"
#include"TFEL/Metaprogramming/StaticAssert.hxx"
#include"TFEL/TypeTraits/IsFundamentalNumericType.hxx"
#include"TFEL/TypeTraits/IsReal.hxx"
#include"TFEL/Math/General/IEEE754.hxx"
#include"TFEL/Math/stensor.hxx"
#include"TFEL/Math/Stensor/StensorView.hxx"
#include"TFEL/Math/Stensor/StensorConceptIO.hxx"
#include"TFEL/Math/tmatrix.hxx"
#include"TFEL/Math/Matrix/tmatrixIO.hxx"
#include"TFEL/Math/st2tost2.hxx"
#include"TFEL/Math/ST2toST2/ST2toST2ConceptIO.hxx"
#include"TFEL/Math/ST2toST2/ST2toST2View.hxx"
#include"TFEL/Material/ModellingHypothesis.hxx"

#include "TFEL/Math/RootFinding/BissectionAlgorithmBase.hxx"
#include "TFEL/Math/AccelerationAlgorithms/AitkenAccelerationAlgorithm.hxx"

#include"MFront/Castem/Castem.hxx"

namespace tfel{

namespace material{

//! \brief forward declaration
template<ModellingHypothesis::Hypothesis hypothesis,typename,bool>
class chabocheBehaviourData;

//! \brief forward declaration
template<ModellingHypothesis::Hypothesis hypothesis,typename Type,bool use_qt>
class chabocheIntegrationData;

//! \brief forward declaration
template<ModellingHypothesis::Hypothesis hypothesis,typename Type>
std::ostream&
 operator <<(std::ostream&,const chabocheBehaviourData<hypothesis,Type,false>&);

template<ModellingHypothesis::Hypothesis hypothesis,typename Type>
class chabocheBehaviourData<hypothesis,Type,false>
{

static constexpr unsigned short N = ModellingHypothesisToSpaceDimension<hypothesis>::value;
TFEL_STATIC_ASSERT(N==1||N==2||N==3);
TFEL_STATIC_ASSERT(tfel::typetraits::IsFundamentalNumericType<Type>::cond);
TFEL_STATIC_ASSERT(tfel::typetraits::IsReal<Type>::cond);

friend std::ostream& operator<< <>(std::ostream&,const chabocheBehaviourData&);

/* integration data is declared friend to access   driving variables at the beginning of the time step */
friend class chabocheIntegrationData<hypothesis,Type,false>;

static constexpr unsigned short TVectorSize = N;
typedef tfel::math::StensorDimeToSize<N> StensorDimeToSize;
static constexpr unsigned short StensorSize = StensorDimeToSize::value;
typedef tfel::math::TensorDimeToSize<N> TensorDimeToSize;
static constexpr unsigned short TensorSize = TensorDimeToSize::value;

using ushort =  unsigned short;
using Types = tfel::config::Types<N,Type,false>;
using real                = typename Types::real;
using time                = typename Types::time;
using length              = typename Types::length;
using frequency           = typename Types::frequency;
using speed               = typename Types::speed;
using stress              = typename Types::stress;
using strain              = typename Types::strain;
using strainrate          = typename Types::strainrate;
using stressrate          = typename Types::stressrate;
using temperature         = typename Types::temperature;
using thermalexpansion    = typename Types::thermalexpansion;
using thermalconductivity = typename Types::thermalconductivity;
using massdensity         = typename Types::massdensity;
using energydensity         = typename Types::energydensity;
using TVector             = typename Types::TVector;
using Stensor             = typename Types::Stensor;
using Stensor4            = typename Types::Stensor4;
using FrequencyStensor    = typename Types::FrequencyStensor;
using ForceTVector        = typename Types::ForceTVector;
using StressStensor       = typename Types::StressStensor;
using StressRateStensor   = typename Types::StressRateStensor;
using DisplacementTVector = typename Types::DisplacementTVector;
using StrainStensor       = typename Types::StrainStensor;
using StrainRateStensor   = typename Types::StrainRateStensor;
using StiffnessTensor     = typename Types::StiffnessTensor;
using Tensor              = typename Types::Tensor;
using FrequencyTensor     = typename Types::FrequencyTensor;
using StressTensor        = typename Types::StressTensor;
using ThermalExpansionCoefficientTensor = typename Types::ThermalExpansionCoefficientTensor;
using DeformationGradientTensor         = typename Types::DeformationGradientTensor;
using DeformationGradientRateTensor     = typename Types::DeformationGradientRateTensor;
using TemperatureGradient = typename Types::TemperatureGradient;
using HeatFlux = typename Types::HeatFlux;
using TangentOperator   = StiffnessTensor;
using PhysicalConstants = tfel::PhysicalConstants<real>;

protected:

StrainStensor eto;

StressStensor sig;

#line 8 "chaboche.mfront"
stress xyoung;
#line 9 "chaboche.mfront"
stress xnu;
#line 10 "chaboche.mfront"
stress xR0;
#line 11 "chaboche.mfront"
stress xQ;
#line 12 "chaboche.mfront"
real xb;

StrainStensor eel;
strain p;
temperature T;

public:

/*!
* \brief Default constructor
*/
chabocheBehaviourData()
{}

/*!
* \brief copy constructor
*/
chabocheBehaviourData(const chabocheBehaviourData& src)
: eto(src.eto),
sig(src.sig),
xyoung(src.xyoung),
xnu(src.xnu),
xR0(src.xR0),
xQ(src.xQ),
xb(src.xb),
eel(src.eel),
p(src.p),
T(src.T)
{}

/*
 * \brief constructor for the Castem interface
 * \param[in] CASTEMT_: temperature
 * \param[in] CASTEMmat: material properties
 * \param[in] CASTEMint_vars: state variables
 * \param[in] CASTEMext_vars: external std::ate variables
 */
chabocheBehaviourData(const Type* const CASTEMT_,const Type* const CASTEMmat,
const Type* const CASTEMint_vars
,const Type* const)
: xyoung(CASTEMmat[0]),
xnu(CASTEMmat[1]),
xR0(CASTEMmat[2]),
xQ(CASTEMmat[3]),
xb(CASTEMmat[4]),
eel(&CASTEMint_vars[0]),
p(CASTEMint_vars[StensorSize]),
T(*CASTEMT_)
{
}

void setCASTEMBehaviourDataGradients(const Type* const CASTEMstran)
{
this->eto.importVoigt(CASTEMstran);
}

void setCASTEMBehaviourDataThermodynamicForces(const Type* const CASTEMstress_)
{
this->sig.importTab(CASTEMstress_);
}


/*
* \brief Assignement operator
*/
chabocheBehaviourData&
operator=(const chabocheBehaviourData& src){
this->eto = src.eto;
this->sig = src.sig;
this->xyoung = src.xyoung;
this->xnu = src.xnu;
this->xR0 = src.xR0;
this->xQ = src.xQ;
this->xb = src.xb;
this->eel = src.eel;
this->p = src.p;
this->T = src.T;
return *this;
}

void
CASTEMexportStateData(Type * const CASTEMstress_,Type * const CASTEMstatev) const
{
using namespace tfel::math;
this->sig.exportTab(CASTEMstress_);
exportToBaseTypeArray(this->eel,&CASTEMstatev[0]);
CASTEMstatev[StensorSize] = this->p;
} // end of CASTEMexportStateData

}; // end of chabocheBehaviourDataclass

template<ModellingHypothesis::Hypothesis hypothesis,typename Type>
std::ostream&
operator <<(std::ostream& os,const chabocheBehaviourData<hypothesis,Type,false>& b)
{
os << "εᵗᵒ : " << b.eto << '\n';
os << "σ : " << b.sig << '\n';
os << "xyoung : " << b.xyoung << '\n';
os << "xnu : " << b.xnu << '\n';
os << "xR0 : " << b.xR0 << '\n';
os << "xQ : " << b.xQ << '\n';
os << "xb : " << b.xb << '\n';
os << "εᵉˡ : " << b.eel << '\n';
os << "p : " << b.p << '\n';
os << "T : " << b.T << '\n';
return os;
}

} // end of namespace material

} // end of namespace tfel

#endif /* LIB_TFELMATERIAL_CHABOCHE_BEHAVIOUR_DATA_HXX */
